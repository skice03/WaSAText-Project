openapi: 3.0.3

info:
  title: WaSAText API
  description: This is the API for the first WaSAText Homework.
  version: 1.0.0
  
tags:
  - name: login
    description: Operations related to user authentication and login functionality.
    
  - name: users
    description: Endpoints for managing user profile details.
    
  - name: conversations
    description: Endpoints to list or retrieve details of conversations for a user.
    
  - name: messages
    description: Endpoints for sending and managing messages within conversations.
    
  - name: groups
    description: Endpoints to create, manage, and interact with user groups and group-related conversations.
    
components:
  responses:
    BadRequest:
      description: Bad Request - Invalid input data.
      content: 
        application/json:
          schema:
            type: object
            description: Represents an error response.
            properties:
              errorMessage:
                type: string
                example: "Bad Request"
                description: The server could not process the request due to invalid syntax or missing required parameters.
                
    Unauthorized: 
      description: Unauthorized - The user is not authenticated.
      content:
        application/json:
          schema:
            type: object
            description: Represents an error response.
            properties:
              errorMessage:
                type: string
                example: "Unauthorized"
                description: Authentication is required and has failed or has not been provided.
                
    Forbidden:
      description: Forbidden - The action is prohibited.
      content:
        application/json:
          schema:
            type: object
            description: Represents an error response.
            properties:
              errorMessage:
                type: string
                example: "Forbidden"
                description: The client does not have permission to access the requested resource.
                
    NotFound:
      description: Not Found - The resource could not be found.
      content: 
        application/json:
          schema:
            type: object
            description: Represents an error response.
            properties:
              errorMessage:
                type: string
                example: "Not Found"
                description: The server cannot find the requested resource. The URL may be incorrect or the resource does not exist.
      
  schemas:
    username:
      type: string
      minLength: 3
      maxLength: 16
      pattern: '^.*?$'
      example: Maria
      description: The username which is between 3 and 16 characters long.
      
    gifMedia:
      type: string
      minLength: 50
      maxLength: 10000000
      format: binary
      description: .gif image content
    
    userId:
      type: integer
      example: 1
      description: The unique identifier of the user.
    
    chatId:
      type: integer
      example: 2
      description: The unique identifier of the conversation.
      
    chatName:
      type: string
      minLength: 1
      maxLength: 30
      pattern: '^.*?$'
      example: 'Group123'
      description: A group username which has to be between 1 and 30 characters long.
    
    messageId:
      type: integer
      example: 3
      description: The unique identifier of the message.
      
    messageContent:
      type: string
      minLength: 1
      maxLength: 2000
      pattern: '^.+$'
      example: "This is a message."
      description: The plain text content of the message.
      
  securitySchemes:
    securityKey: 
      type: apiKey
      in: header
      name: authorizationKey
      description: API key that will be used for authorization.
      
paths:
  /session:
    post:
      tags: ['login']
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              description: The chosen username.
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
                  description: The username has to be between 3 and 16 characters long.
        required: true
      responses:
        '201':
            description: User log-in action successful.
            content:
              application/json:
                schema:
                  type: object
                  description: Fetches the username and the API key.
                  properties:
                    username: { $ref: '#/components/schemas/username' }
                    apiKey:
                      type: string
                      example: "qwerty1234567890"
                      description: The API key that will be returned upon login.
                    
  /users/{id}/username:
    parameters:
      - name: id
        in: path
        description: The ID of the user to be updated.
        required: true
        schema: { $ref: '#/components/schemas/userId' }
        
    put: 
      tags: ['users']
      summary: Set the user's display name
      description: Sets a new username for the specified user.
      operationId: setMyUserName
      security:
        - securityKey: []
      requestBody:
        description: The new username for the specified user.
        content:
          application/json:
            schema: 
              type: object
              description: Updated username.
              properties: 
                username: { $ref: '#/components/schemas/username' }
              required:
                - username
        required: true
      responses: 
        '204': { description:  Successfully updated the username. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound'}
          
    get:
      tags: ['users']
      summary: Retrieve the user's name
      description: Retrieve the username via user ID.
      operationId: getUsername
      security:
        - securityKey: []
      responses:
        '200': 
          description: Successfully retrieved the username.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/username' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound'}
          
  /users/{id}/photo:
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the user to be updated.
        schema: { $ref: '#/components/schemas/userId' }
        
    put:
      tags: ['users']
      summary: Update the user's profile picture
      description: Changes the user's profile picture to the specified .gif file.
      operationId: setMyPhoto
      security:
        - securityKey: []
      requestBody:
        description: The user's updated profile picture in .gif format.
        content: 
          image/gif:
            schema:
              type: string
              format: binary
              minLength: 50
              maxLength: 10000000
              description: The uploaded the .gif image
        required: true
      responses:
        '204': { description: Successfully updated the user's photo. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound'}
        
    get:
      tags: ['users']
      summary: Retrieve the user's profile picture.
      description: Retrieve the profile photo (.gif image) via user ID.
      operationId: getPhoto
      security:
        - securityKey: []
      responses:
        '200': 
          description: Successfully retrieved the photo.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/gifMedia' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound'}
      
  /chats:
    get:
      tags: ['conversations']
      summary: Get the conversations of a user
      description: Return the conversation IDs for the mentioned user.
      operationId: getMyConversations
      security:
        - securityKey: []
      responses:
        '200':
          description: Array containing conversation IDs.
          content:
            application/json:
              schema:
                type: object
                description: Fetches the conversation ID.
                properties:
                  userChats:
                    type: array
                    minItems: 0
                    maxItems: 2000
                    items: { $ref: '#/components/schemas/chatId' }
                    description: Array containing conversation IDs.
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
          
  /chats/{chatId}:
    parameters: 
      - name: chatId
        in: path
        required: true
        schema: { $ref: '#/components/schemas/chatId' }
        description: The unique identifier of the conversation.
        
    get:
      tags: ['conversations']
      summary: Get the details of a specific conversation
      description: Get the details of a specific conversation via ID.
      operationId: getConversation
      security:
        - securityKey: []
      responses: 
        '200':
          description: Array containing message and sender details.
          content:
            application/json:
              schema: 
                type: object
                description: Return every message & user ID from a specified conversation.
                properties: 
                  message:
                    type: array
                    minItems: 0
                    maxItems: 15000
                    items: { $ref: '#/components/schemas/messageId' }
                    description: Array containing messages.
                  members:
                    type: array
                    minItems: 0
                    maxItems: 2000
                    items: { $ref: '#/components/schemas/userId' }
                    description: Array containing users.
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        
    post:
      tags: ['messages']
      summary: Send a new message inside the conversation
      description: Allows the user to send a message.
      operationId: sendMessage
      requestBody:
        description: The content of the message to be sent in the conversation.
        content:
          application/json:
            schema: { $ref: '#/components/schemas/messageContent' }
          image/gif:
            schema: 
              type: string
              format: binary
              minLength: 50
              maxLength: 10000000
              description: .gif image content
        required: true
      security:
        - securityKey: []
      responses:
        '204': { description: The message has been successfully sent. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    
  /chats/{chatId}/messages/{messageId}:
    parameters:
      - name: chatId
        in: path
        required: true
        schema: { $ref: '#/components/schemas/chatId' }
        description: The unique identifier of the conversation.
      - name: messageId
        in: path
        required: true
        schema: { $ref: '#/components/schemas/messageId' }
        description: The unique identifier of the message.  
          
    post:
      tags: ['messages']
      summary: Forward a message to a different conversation
      description: Allows a user to forward a message from a conversation to a different one.
      operationId: forwardMessage
      requestBody:
        description: Details about the forwarded message.
        content:
          application/json:
            schema:
              description: Fetches the ID and the destination conversation of the forwarded message.
              type: object
              properties:
                messageId: { $ref: '#/components/schemas/messageId' }
                forwardedChatId: { $ref: '#/components/schemas/chatId' }
        required: true
      security:
        - securityKey: []
      responses:
        '204': { description: The message has been successfully forwarded. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        
    get:
      tags: ['messages']
      summary: Retrieve messages from a conversation
      description: Retrieve the content of a message.
      operationId: getMessage
      security:
        - securityKey: []
      responses:
        '200': 
          description: Successfully retrieved the message.
          content:
            application/json:
              schema:
                type: object
                description: The content of the message.
                properties:
                  textMessage: { $ref: '#/components/schemas/messageContent' }
                  sender: { $ref: '#/components/schemas/userId' }
                  isPhoto: 
                    type: boolean
                    description: Specifies if the message is a photo or not.
                  isForwarded: 
                    type: boolean
                    description: Specifies if the message is forwarded or not.
                  status: 
                    type: array
                    minItems: 0
                    maxItems: 2000
                    items: { $ref: '#/components/schemas/userId' }
                    description: Indicates if the user has received and read the message.
                  textComment: { $ref: '#/components/schemas/messageContent' }  
                  timestamp:
                    type: string
                    format: date-time
                    example: '2017-07-21T17:32:28Z'
                    description: Indicates the time when the message was sent.
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
                    
    delete:
      tags: ['messages']
      summary: Delete a message from a conversation
      description: Allows a user to delete a message from a conversation.
      operationId: deleteMessage
      security:
        - securityKey: []
      responses:
        '204': { description: The message has been successfully deleted. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /chats/{chatId}/messages/{messageId}/photo:
    parameters:
      - name: chatId
        in: path
        required: true
        schema: { $ref: '#/components/schemas/chatId' }
        description: The unique identifier of the conversation.
      - name: messageId
        in: path
        required: true
        schema: { $ref: '#/components/schemas/messageId' }
        description: The unique identifier of the message.

    get:
      tags: ['messages']
      summary: Retrieve .gif messages in a conversation
      description: Retrieve the .gif content of a message.
      operationId: getMessagePhoto
      security:
        - securityKey: []
      responses:
        '200': 
          description: Successfully retrieved the message.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/gifMedia' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        
  /chats/{chatId}/messages/{messageId}/comments:
    parameters:
      - name: chatId
        in: path
        required: true
        description: The unique identifier of the conversation.
        schema: { $ref: '#/components/schemas/chatId' }
      - name: messageId
        in: path
        required: true
        description: The ID of the message to which a comment will be added.
        schema: { $ref: '#/components/schemas/messageId' }
          
    post:
      tags: ['messages']
      summary: Add a comment to a message in a conversation
      description: Allows a user to add a new comment to a specific message in a conversation.
      operationId: commentMessage
      requestBody:
        description: The comment to be added to the message.
        content:
          application/json:
            schema: { $ref: '#/components/schemas/messageContent' }
        required: true
      security:
        - securityKey: []
      responses:
        '204': { description: The comment has been successfully added to the message. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
          
    delete:
      tags: ['messages']
      summary: Delete a comment from a message in a conversation
      description: Allows a user to delete a comment from a specific message in a conversation.
      operationId: uncommentMessage
      security: 
        - securityKey: []
      responses:
        '204': { description: The comment has been successfully removed from the message. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
          
  /chats/{chatId}/chatName:
    parameters:
      - name: chatId
        in: path
        required: true
        description: The unique identifier of the conversation.
        schema: { $ref: '#/components/schemas/chatId' }
    
    put:
      tags: ['groups']
      summary: Set a new name for a group
      description: Allows a user to change the name of a group.
      operationId: setGroupName
      requestBody:
        description: The new name for the group.
        content:
          application/json:
            schema:
              type: object
              description: A string representing the new name of the group.
              properties:
                newGroupName: { $ref: '#/components/schemas/chatName'}
              required:
                - newGroupName
        required: true
      security:
        - securityKey: []
      responses:
        '204': { description: The group name has been successfully updated. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden'}
        '404': { $ref: '#/components/responses/NotFound' }
        
    get:
      tags: ['groups']
      summary: Retrieve a group name.
      description: Retrieves the name of a group chat.
      operationId: getChatName
      security: 
        - securityKey: []
      responses:
        '200':
          description: Succesfully retrived the group name.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/chatName' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
  
  /chats/{chatId}/photo:
    parameters:
      - name: chatId
        in: path
        required: true
        description: The unique identifier of the conversation.
        schema: { $ref: '#/components/schemas/chatId' }
  
    put:
      tags: ['groups']
      summary: Modify the photo (.gif) of a conversation
      description: Allows a user to change the photo (.gif file format) of a conversation.
      operationId: setGroupPhoto
      requestBody:
        description: The new group photo (.gif)
        content:
          image/gif:
            schema:
              type: string
              format: binary
              minLength: 50
              maxLength: 10000000
              description: Updated group photo (.gif file format)
        required: true
      security:
        - securityKey: []
      responses:
        '204': { description: The group photo has been successfully updated. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden'}
        '404': { $ref: '#/components/responses/NotFound' }
        
    get:
      tags: ['groups']
      summary: Retrieve a group photo.
      description: Retrieves the photo (.gif image) of a group chat.
      operationId: getChatPhoto
      security: 
        - securityKey: []
      responses:
        '200':
          description: Succesfully retrived the group photo.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/gifMedia' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }    

  /chats/{chatId}/members:
    parameters:
      - name: chatId
        in: path
        required: true
        description: The unique identifier of the conversation.
        schema: { $ref: '#/components/schemas/chatId' }
      
    put:
      tags: ['groups']
      summary: Add members to a group conversation
      description: Allows a user to add multiple members to a group.
      operationId: addToGroup
      requestBody:
        description: The user IDs to be added to the group.
        content:
          application/json:
            schema:
              type: object
              description: Members to be added.
              properties:
                newMembers:
                  type: array
                  minItems: 0
                  maxItems: 2000
                  items: { $ref: '#/components/schemas/userId' }
                  description: A list of user IDs to be added to the group.
              required:
                - newMembers
        required: true
      security:
        - securityKey: []
      responses:
        '204': { description: The member(s) have been successfully added to the group. }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden'}
        '404': { $ref: '#/components/responses/NotFound' }
        
    delete:
      tags: ['groups']
      summary: Leave a group
      description: Allows a user to leave a group
      operationId: leaveGroup
      security:
        - securityKey: []
      responses:
        '204': { description: Successfully left the group. }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
